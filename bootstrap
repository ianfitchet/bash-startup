# BASH_ARGV is set by Bash 3+ when sourcing a script
if [[ ${BASH_ARGV+good} = good ]] ; then
    FPATH="${FPATH+${FPATH}:}${BASH_ARGV[0]%/*}"
fi

stderr ()
{
    echo $* >&2
}

notice ()
{
    stderr "NOTICE: $*"
}

warn ()
{
    stderr "WARNING: $*"
}

error ()
{
    stderr "ERROR: $*"
}

_uname ()
{
    typeset __uname
    __uname=( $(uname -mrps) )

    OS_NAME="${__uname[0]}"
    OS_REV="${__uname[1]}"

    typeset OIFS="${IFS}"
    IFS=.
    OS_REVISION=( ${OS_REV} )
    IFS="${OIFS}"
}

_uname

{
    typeset dirs dir d
    OIFS="${IFS}"
    IFS=:
    dirs=( ${FPATH} )
    IFS="${OIFS}"

    for d in "${dirs[@]}" ; do
	if [[ -f "${d}"/require.bash ]] ; then
	    dir="${d}"
	    break
	fi
    done

    if [[ ${dir} ]] ; then
	source "${dir}"/require.bash
    fi

    unset dirs dir d
}

######################################################################
# 
# order [options] version ...
#
# Return the version strings ordered (most recent first)

# [options]

# -t SEP - the element separator (defaults to `:')

order ()
{
    typeset opt_sep=.

    OPTIND=1
    while getopts "t:" opt ; do
	case "${opt}" in
	t)
	    opt_sep="${OPTARG}"
	    ;;
	?)
            error "Unexpected argument"
            ;;
	esac
    done

    shift $(( $OPTIND - 1 ))

    (
	for v in "$@" ; do
	    echo "$v"
	done
    ) | sort -t"${opt_sep}" -k 1nr -k 1r -k 2nr -k 2r -k 3nr -k 3r -k 4nr -k 4r
}

newest_release ()
{
    typeset prefix="$1"
    typeset callback="$2"

    typeset dists

    dists=( ${prefix}* )
    dists=( $(order "${dists[@]#${prefix}}") )

    typeset i
    for ((i=0; i < ${#dists[*]}; i++)) ; do
    	if [[ -d "${prefix}${dists[i]}" ]] ; then
	    $callback "${dists[i]}"
    	    break
    	fi
    done
}

# Local Variables:
# mode: Shell-script
# buffer-file-coding-system: undecided-unix
# End:
